pkgbase=linux-pipa
_branch=domin746826/dev
_srcname=linux-pipa
pkgver=6.14.11
pkgrel=3
pkgdesc='Snapdragon 865 Mainline Linux for Pipa'
url='https://github.com/pipa-project/linux'
arch=(aarch64)
license=(GPL-2.0-only)
makedepends=(
	bc
	cpio
	gettext
	git
	libelf
	pahole
	perl
	python
	rust
	rust-bindgen
	rust-src
	tar
	xz

	# htmldocs
	# graphviz
	# imagemagick
	# python-sphinx
	# python-yaml
	# texlive-latexextra
)
options=(
	!debug
	!strip
)
source=(
	"$_srcname::git+$url.git#branch=$_branch"
	"defconfig_pipa"
    "0001-input-keyboard-nanosic_803.c-fix-compile.patch"
)
sha256sums=(
	"SKIP"
	"51d0bc32969a677575f4c606c9ad4c1dafa3a6dec76b0c5978edb84d4549aa46"
    "a8bb3534ee122952a1b394e78cee8b85862cfee1d123293ab5edfd65a158ac4e"
)

export KBUILD_BUILD_HOST=lon
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"
export KARCH=arm64

prepare() {
	cd $_srcname

	echo "Setting version..."
	echo "-$pkgrel" >localversion.10-pkgrel
	echo "${pkgbase#linux}" >localversion.20-pkgname

	local src
	for src in "${source[@]}"; do
		src="${src%%::*}"
		src="${src##*/}"
		src="${src%.zst}"
		[[ $src = *.patch ]] || continue
		echo "Applying patch $src..."
		patch -Np1 <"../$src"
	done

	echo "Setting config..."
	cp ../defconfig_pipa .config

	# Don't run depmod on "make install", we'll do that ourselves in packaging
	sed -i '2iexit 0' scripts/depmod.sh
	echo "Prepared $pkgbase"
}

build() {
	cd $_srcname
	unset LDFLAGS
	make Image.gz modules dtbs
	make -s kernelrelease >version
}

pkgver() {
	cd $_srcname
	printf "%s" "$(make kernelversion -s)"
}

_package() {
	pkgdesc="The $pkgdesc kernel and modules"
	depends=(
		'linux-firmware-xiaomi-pipa>=25.06.26'
		'coreutils'
		'initramfs'
		'kmod'
	)
	optdepends=(
		'linux-firmware: firmware images needed for some devices'
		'scx-scheds: to use sched-ext schedulers'
		'wireless-regdb: to set the correct wireless channels of your country'
	)
	provides=(
		WIREGUARD-MODULE
	)
	replaces=(
	)

	cd $_srcname
	local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

	echo "Installing boot image..."
	install -d -m755 "$pkgdir/boot"
	install -Dm644 arch/$KARCH/boot/dts/qcom/sm8250-xiaomi-pipa.dtb "$pkgdir/boot/dtb-$(<version)"
	ln -sr "$pkgdir/boot/dtb-$(<version)" "$pkgdir/boot/dtb-$pkgbase"
	install -Dm644 arch/$KARCH/boot/Image.gz "$pkgdir/boot/vmlinuz-$(<version)"
	# systemd expects to find the kernel here to allow hibernation
	# https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
	install -Dm644 arch/$KARCH/boot/Image.gz "$pkgdir/usr/lib/modules/$(<version)/vmlinuz"

	# Used by mkinitcpio to name the kernel
	echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

	echo "Installing modules..."
	ZSTD_CLEVEL=19 make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
		DEPMOD=/doesnt/exist modules_install # Suppress depmod

	rm "$modulesdir"/build
}

_package-headers() {
	pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
	depends=(pahole)
	provides=(
		'linux-headers'
	)

	cd $_srcname
	local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

	echo "Installing build files..."
	install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
		localversion.* version vmlinux
	install -Dt "$builddir/kernel" -m644 kernel/Makefile
	install -Dt "$builddir/arch/$KARCH" -m644 arch/$KARCH/Makefile
	cp -t "$builddir" -a scripts
	ln -srt "$builddir" "$builddir/scripts/gdb/vmlinux-gdb.py"

	echo "Installing headers..."
	cp -t "$builddir" -a include
	cp -t "$builddir/arch/$KARCH" -a arch/$KARCH/include
	install -Dt "$builddir/arch/$KARCH/kernel" -m644 arch/$KARCH/kernel/asm-offsets.s

	install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
	install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

	# https://bugs.archlinux.org/task/13146
	install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

	# https://bugs.archlinux.org/task/20402
	install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
	install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
	install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

	# https://bugs.archlinux.org/task/71392
	install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

	echo "Installing KConfig files..."
	find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

	echo "Removing unneeded architectures..."
	local arch
	for arch in "$builddir"/arch/*/; do
		[[ ${arch} = */${KARCH}/ || ${arch} == */arm/ ]] && continue
		echo "Removing $(basename "$arch")"
		rm -r "$arch"
	done

	echo "Removing documentation..."
	rm -r "$builddir/Documentation"

	echo "Removing broken symlinks..."
	find -L "$builddir" -type l -printf 'Removing %P\n' -delete

	echo "Removing loose objects..."
	find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

	echo "Stripping build tools..."
	local file
	while read -rd '' file; do
		case "$(file -Sib "$file")" in
		application/x-sharedlib\;*) # Libraries (.so)
			${CROSS_COMPILE}strip -v $STRIP_SHARED "$file" ;;
		application/x-archive\;*) # Libraries (.a)
			${CROSS_COMPILE}strip -v $STRIP_STATIC "$file" ;;
		application/x-executable\;*) # Binaries
			${CROSS_COMPILE}strip -v $STRIP_BINARIES "$file" ;;
		application/x-pie-executable\;*) # Relocatable binaries
			${CROSS_COMPILE}strip -v $STRIP_SHARED "$file" ;;
		esac
	done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

	echo "Stripping vmlinux..."
	${CROSS_COMPILE}strip -v $STRIP_STATIC "$builddir/vmlinux"

	echo "Adding symlink..."
	mkdir -p "$pkgdir/usr/src"
	ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

_package-docs() {
	pkgdesc="Documentation for the $pkgdesc kernel"

	cd $_srcname
	local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

	echo "Installing documentation..."
	local src dst
	while read -rd '' src; do
		dst="${src#Documentation/}"
		dst="$builddir/Documentation/${dst#output/}"
		install -Dm644 "$src" "$dst"
	done < <(find Documentation -name '.*' -prune -o ! -type d -print0)

	echo "Adding symlink..."
	mkdir -p "$pkgdir/usr/share/doc"
	ln -sr "$builddir/Documentation" "$pkgdir/usr/share/doc/$pkgbase"
}

pkgname=(
	"$pkgbase"
	"$pkgbase-headers"
)
for _p in "${pkgname[@]}"; do
	eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done
